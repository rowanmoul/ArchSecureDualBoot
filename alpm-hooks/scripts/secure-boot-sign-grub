#!/bin/bash -e

trap 'on_exit $?' EXIT

on_exit() {
    # Check for an error
    if [ "$1" != "0" ]; then
        rm grubx64.efi 2>/dev/null
        rm dbdecrypt.key 2>/dev/null
        echo "An unexpected error occurred. GRUB may not have been signed for secure boot."
    fi
}

# Copy the grub image to be signed to the present working directory.
cp /efi/EFI/GRUB/grubx64.efi grubx64.efi

# Decrypt the db key to a file
# Unfortunately sbsign cannot accept key input from sdtin
# Since this is inside the encrypted drive the key isn't directly exposed on the disk in the clear
gpg --homedir /root/bootkeys/gnupg --output dbdecrypt.key -q --decrypt /root/bootkeys/db.key

# Sign the image and overwrite the original with the signed copy.
echo -n "grubx64.efi - " && sbsign --key dbdecrypt.key --cert /root/bootkeys/db.crt --output /efi/EFI/GRUB/grubx64.efi grubx64.efi

# Delete decrypted key
rm dbdecrypt.key

# Make sure the new signed image is larger than the copy of the original.
# Since the signing process adds the signature to the file itself, the new image should be slightly larger.
# If the new image is not larger, this if will trigger and copy back the original image so that the computer isn't rendered unbootable.
# Obviously this can't protect from a corrupted image, but at least it's better than no checks at all?
if [[ $(du -b /efi/EFI/GRUB/grubx64.efi | cut -f1) -lt $(du -b grubx64.efi | cut -f1) ]]; then
  cp grubx64.efi /efi/EFI/GRUB/grubx64.efi
  echo "ERROR! Failed to sign grub image for secure boot! Original image restored."
fi

# Remove the copy of the original image in the present working directory.
rm grubx64.efi