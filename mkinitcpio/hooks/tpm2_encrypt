#!/usr/bin/ash

run_earlyhook() {
    # make /tpm_files if it doesn't exist
    mkdir /tpm_files

    # Check for tpm_efi_part, resolve it, and mount it.
    if [ -n "$tpm_files_part" ] && resolved_files_part="$(resolve_device "$tpm_files_part")" && mount "$resolved_files_part" /tpm_files; then
        return 0
    else
        return 1
    fi
}

run_hook() {
    # make sure the tpm module is loaded
    modprobe -a -q tpm_crb tpm_tis >/dev/null 2>&1

    # Set default TCTI to be tpm0 instead of tpmrm0
    # This means we are accessing the TPM directly and need to be careful to clean up after ourselves.
    export TPM2TOOLS_TCTI="device:/dev/tpm0"

    # ==========================
    # Collect Input and Validate
    # ==========================

    # Check if partition is mounted at /tpm_files. Abort if not.
    if ! mountpoint -q "/tpm_files" 2>/dev/null; then
        echo "tpm2_encrypt could not mount tpm_files_part device. Falling back to passphrase prompt."
        return 1 
    fi

    # Check for tpm_file_dir and validate input
    if [ -n "$tpm_files_dir" ] && [ -d "/tpm_files$tpm_files_dir" ]; then
        base_file_path="/tpm_files$tpm_files_dir"
    elif [ -n "$cryptdevice" ]; then
        # Try to use folder named as UUID of the luks container
        IFS=: read -r luksdevice _ <<EOF
$cryptdevice
EOF
        if resolved_luksdevice="$(resolve_device "$luksdevice")" && crypt_UUID=$(cryptsetup luksUUID "$resolved_luksdevice") &&\
        [ -d "tpm_files/$crypt_UUID" ] && [ -d "/tpm_files/$crypt_UUID" ]; then
            base_file_path="/tpm_files/$crypt_UUID"
        else
            # Fall back to root of partition
            base_file_path="/tpm_files"
        fi
    else
        # The encrypt hook will print an error about the lack of a cryptdevice argument.
        return 1
    fi

    # Check for tpm_sealed_key and validate input
    if [ -n "$tpm_sealed_key" ] && [ -f "$base_file_path/$tpm_sealed_key" ]; then 
        sealed_key_handle="$base_file_path/$tpm_sealed_key"
    elif [ -f "$base_file_path/sealed-passphrase.handle" ]; then
        sealed_key_handle="$base_file_path/sealed-passphrase.handle"
    else
        echo "tpm_sealed_key not specified and default not available. Falling back to passphrase prompt."
        return 1
    fi

    # Check for tpm_policy_auth and get policy auth key name and handle
    if [ -n "$tpm_policy_auth" ]; then
        IFS=: read -r pa_name pa_handle <<EOF
$tpm_policy_auth
EOF
        # Validate name input and get file name if specified
        if [ -n "$pa_name" ] && [ -f "$base_file_path/$pa_name" ]; then 
            policy_authorization_key_name="$base_file_path/$pa_name"
        elif [ -f "$base_file_path/policy-authorization-key.name" ]; then
            policy_authorization_key_name="$base_file_path/policy-authorization-key.name"
        fi

        # Validate handle input and get file name if specified
        if [ -n "$pa_handle" ] && [ -f "$base_file_path/$pa_handle" ]; then 
            policy_authorization_key_handle="$base_file_path/$pa_handle"
        elif [ -f "$base_file_path/policy-authorization-key.handle" ]; then
            policy_authorization_key_handle="$base_file_path/policy-authorization-key.handle"
        fi

        # Verify both name and handle were set
        if ! { [ -f "$policy_authorization_key_name" ] && [ -f "$policy_authorization_key_handle" ] ;} then
            echo "tpm_policy_auth file names not found and defaults not available. Falling back to passphrase prompt."
            return 1
        fi
    # Otherwise check for defaults
    elif [ -f "$base_file_path/policy-authorization-key.name" ] && [ -f "$base_file_path/policy-authorization-key.handle" ]; then
        policy_authorization_key_name="$base_file_path/policy-authorization-key.name"
        policy_authorization_key_handle="$base_file_path/policy-authorization-key.handle"
    else
        echo "tpm_policy_auth not specified and defaults not available. Falling back to passphrase prompt."
        return 1
    fi

    # Check for tpm_pcr_bank and validate input
    if [ -n "$tpm_pcr_bank" ]; then 
        case "$tpm_pcr_bank" in
            sha1|sha256|sha384|sha512|sm3_256|sha3_256|sha3_384|sha3_512) # This should be all the possible options according to the spec.
                pcr_bank_alg="$tpm_pcr_bank"
            ;;
            *)
                echo "Unrecognized pcr bank algorithm [$tpm_pcr_bank]. Using default sha256"
                pcr_bank_alg="sha256"
            ;;
        esac
    else
        pcr_bank_alg="sha256"
    fi

    # ========================================================
    # Define functions for tpm operations to reduce repetition
    # ========================================================

    verify_policy_signature() {
        tpm2_verifysignature -Q -c "$policy_authorization_key_handle" -g sha256 -m "$authorized_policy" -s "$authorized_policy_signature" -t /authorized-policy.tkt 2>/dev/null
        return $?
    }

    create_authorized_policy_session() {
        ! tpm2_startauthsession -Q --policy-session -S /sealed-auth-session.ctx 2>/dev/null && return $?

        # tpm2_policypcr can only do so many pcr values at once, so we split them into two calls
        ! tpm2_policypcr -Q -S /sealed-auth-session.ctx -l "$pcr_bank_alg:0,1,2,3,7" 2>/dev/null && return $?

        ! tpm2_policypcr -Q -S /sealed-auth-session.ctx -l "$pcr_bank_alg:4,5,8,9" 2>/dev/null && return $?

        tpm2_policyauthorize -Q -S /sealed-auth-session.ctx -i "$authorized_policy" -n "$policy_authorization_key_name" -t /authorized-policy.tkt 2>/dev/null
        return $?
    }

    create_temporary_authorized_policy_session() {
        ! tpm2_startauthsession -Q --policy-session -S /sealed-auth-session.ctx 2>/dev/null && return $?

        ! tpm2_policypcr -Q -S /sealed-auth-session.ctx -l "$pcr_bank_alg:0,1,2,3,7" 2>/dev/null && return $?

        reset_count=$(tpm2_readclock | sed -En "s/[[:space:]]*reset_count: ([0-9]+)/\1/p")

        ! tpm2_policycountertimer -Q -S /sealed-auth-session.ctx --eq resets=$reset_count && return $?

        tpm2_policyauthorize -Q -S /sealed-auth-session.ctx -i "$authorized_policy" -n "$policy_authorization_key_name" -t /authorized-policy.tkt 2>/dev/null
        return $?
    }

    unseal_passphrase() {
        tpm2_unseal -Q -p "session:/sealed-auth-session.ctx" -c "$sealed_key_handle" -o /crypto_keyfile.bin 2>/dev/null
	    return $?
    }

    create_reauthorize_policy() {
        ! tpm2_startauthsession -Q -S /reauthorize-policy-session.ctx 2>/dev/null && return $?

        ! tpm2_policypcr -Q -S /reauthorize-policy-session.ctx -l "$pcr_bank_alg:0,1,2,3,7" -L /reauthorize-policy.policy 2>/dev/null && return $?

        ! tpm2_policypcr -Q -S /reauthorize-policy-session.ctx -l "$pcr_bank_alg:4,5,8,9" -L /reauthorize-policy.policy 2>/dev/null && return $?

        tpm2_flushcontext -Q /reauthorize-policy-session.ctx 2>/dev/null

        # Also save new pcr values for comparison in future boots
        tpm2_pcrread -Q "$pcr_bank_alg:0,1,2,3,4,5,7,8,9" 2>/dev/null | sort - > /reauthorize-pcr-values.txt 2>/dev/null

        export policy_authorization_key_handle
        export base_file_path
    }

    ask_reauthorize_policy() {
        if [ -f "$base_file_path/authorized-pcr-values.txt" ] && [ -f "$base_file_path/authorized-pcr-values.signature" ]; then
            if ! tpm2_verifysignature -Q -c "$policy_authorization_key_handle" -g sha256 -m "$base_file_path/authorized-pcr-values.txt" -s "$base_file_path/authorized-pcr-values.signature" 2>/dev/null; then
                echo "Failed to verify signature of previous PCR values!"
            fi
            echo "The following PCR values have changed since the last time a policy was authorized:"
            tpm2_pcrread "$pcr_bank_alg:0,1,2,3,4,5,7,8,9" 2>/dev/null | sort - 2>/dev/null | comm -13 "$base_file_path/authorized-pcr-values.txt" - 2>/dev/null
            echo "If you expected these changes (and any errors that have been printed above), you can authorize a new policy that uses them after entering your passphrase."
        else
            echo "Could not find previous PCR values."
            echo "If you expected this (and any errors that have been printed above), you can authorize a new policy that uses the current values after entering your passphrase. This will also store a signed version of the current values for later comparison."
        fi
        echo "Would you like to authorize a new policy? (y/n)"
        read -r yn
        if [ "$yn" = "y" ]; then
            create_reauthorize_policy
        fi
    }

    try_unseal_with_authorized_policy() {
        # Check for authorized policy files
        if [ -f "$base_file_path/authorized-policy.policy" ] && [ -f "$base_file_path/authorized-policy.signature" ]; then
            authorized_policy="$base_file_path/authorized-policy.policy"
            authorized_policy_signature="$base_file_path/authorized-policy.signature"
            if step=0 && verify_policy_signature && step=1 && create_authorized_policy_session && step=2 && unseal_passphrase; then
                # Success!
                tpm2_flushcontext -Q /sealed-auth-session.ctx 2>/dev/null
                return 0
            else
                # Failed to unseal. Ask about re-auth
                if [ "$step" = "0" ]; then
                    echo "Could not verify authorized policy signature!"
                elif [ "$step" = "1" ]; then
                    echo "Failed to create authorized policy session!"
                elif [ "$step" = "2" ]; then
                    echo "Failed to unseal passphrase with authorized policy session!"
                fi
                tpm2_flushcontext -Q /sealed-auth-session.ctx 2>/dev/null
                ask_reauthorize_policy
                return 1
            fi
        else
            # Could not find policy files. Ask about re-auth
            echo "Could not find any authorized policy files!"
            ask_reauthorize_policy
            return 1
        fi
    }

    try_unseal_with_temp_authorized_policy() {
        # Check for temporary authorized policy files
        if [ -f "$base_file_path/temporary-authorized-policy.policy" ] && [ -f "$base_file_path/temporary-authorized-policy.signature" ]; then
            authorized_policy="$base_file_path/temporary-authorized-policy.policy"
            authorized_policy_signature="$base_file_path/temporary-authorized-policy.signature"
            if step=0 && verify_policy_signature && step=1 && create_temporary_authorized_policy_session && step=2 && unseal_passphrase; then
                # success!
                tpm2_flushcontext -Q /sealed-auth-session.ctx 2>/dev/null
                create_reauthorize_policy
                return 0
            else
                # Failed to unseal with temp policy
                if [ "$step" = "0" ]; then
                    echo "Could not verify temporary authorized policy signature!"
                elif [ "$step" = "1" ]; then
                    echo "Failed to create temporary authorized policy session!"
                elif [ "$step" = "2" ]; then
                    echo "Failed to unseal passphrase with temporary authorized policy!"
                fi
                tpm2_flushcontext -Q /sealed-auth-session.ctx 2>/dev/null
                try_unseal_with_authorized_policy && return 0
            fi
        else
            try_unseal_with_authorized_policy && return 0
        fi
        return 1
    }

    # =====================
    # Unseal the passphrase
    # =====================

    # Final check of input variables
    if [ -f "$sealed_key_handle" ] && [ -f "$policy_authorization_key_name" ] && [ -f "$policy_authorization_key_handle" ] && [ -n "$pcr_bank_alg" ]; then
        # try to unseal
        try_unseal_with_temp_authorized_policy
        return $?
    else
        echo "An unexpected input error occured. Please verify your kernel arguments for tpm2_encrypt. Falling back to passphrase prompt."
        return 1
    fi
}

run_latehook() {
    # This is where we will optionally re-authorize a policy with the current PCR values.
    # This is done as a late hook as we need the root FS to be mounted already so we can use the other half of the auth key access to sign the new policy.
    # No checks are done here. If these files exist, they will be signed.
    # If the user is not using secure boot and secure grub to ensure their initramfs image is not tampered with then this could be a security hole, as
    # someone could modify the initramfs to insert their own policy with the same filename and it would be signed.

    local auth_key_access
    auth_key_access="hex:0x$(cat $base_file_path/policy-authorization-accessaa /new_root/root/bootkeys/policy-authorization-accessab)"

    if [ -f /reauthorize-policy.policy ]; then
        mv /reauthorize-policy.policy "$base_file_path/authorized-policy.policy"

        tpm2_sign -Q -c "$policy_authorization_key_handle" -p "$auth_key_access" -g sha256 -s rsapss -o "$base_file_path/authorized-policy.signature" "$base_file_path/authorized-policy.policy" 2>/dev/null
    fi
    if [ -f /reauthorize-pcr-values.txt ]; then
        mv /reauthorize-pcr-values.txt "$base_file_path/authorized-pcr-values.txt"

        tpm2_sign -Q -c "$policy_authorization_key_handle" -p "$auth_key_access" -g sha256 -s rsapss -o "$base_file_path/authorized-pcr-values.signature" "$base_file_path/authorized-pcr-values.txt" 2>/dev/null
    fi
}

run_cleanuphook() {
    # It's always good to clean up after yourself. Even if this ramdisk is going to be deallocated.
    tpm2_flushcontext -Q /sealed-auth-session.ctx 2>/dev/null
    rm /sealed-auth-session.ctx 2>/dev/null
    rm /authorized-policy.tkt 2>/dev/null
    tpm2_flushcontext -Q /reauthorize-policy-session.ctx 2>/dev/null
    rm /reauthorize-policy-session.ctx 2>/dev/null
    rm /reauthorize-policy-values.txt 2>/dev/null
    # Either this was used to unseal and re-authorize, or it didn't work. Either way, no need to keep it.
    rm "$base_file_path/temporary-authorized-policy.policy" 2>/dev/null
    rm "$base_file_path/temporary-authorized-policy.signature" 2>/dev/null
    umount /tpm_files
}

# vim: set ft=sh ts=4 sw=4 et:
